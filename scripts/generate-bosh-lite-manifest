#!/bin/bash

set -e

root_dir=$(cd "$(dirname "$0")/.." && pwd)
templates_dir=${root_dir}/templates

usage() {
  >&2 cat <<EOF
SYNOPSIS:
    Generate a bosh-lite manifest for an Autoscaler deployment to accompany an existing CF deployment.
USAGE:
    $0 <MANDATORY ARGUMENTS> [OPTIONAL ARGUMENTS]
MANDATORY ARGUMENTS:
    -c <cf-path>                Path to CF manifest file.
    -p <property-path>          Path to property-overrides stub file.
OPTIONAL ARGUMENTS:
    -d <db-stub-path>           Path to database stub file.
    --v1                        Flag to use BOSH V1 manifest template
EXAMPLE:
    $0 \\
      -c ../cf-release/bosh-lite/deployments/cf.yml \\
      -p ./example/property-overrides.yml \\
      -d ./example/dbstubs/db-stub-external.yml \\
EOF
  exit 1
}

V1=false
ARGS=`getopt -o c:p:d: --long v1 -n 'generate-bosh-lite-manifest.sh' -- "$@"`

if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

eval set -- "$ARGS"

while true ; do
  case "$1" in
    -c)
        cf_manifest_file=$2
        shift 2 ;;
    -p)
        property_overrides=$2
        shift 2 ;;
    -d)
	      db_settings=$2
        shift 2 ;;
    --v1)
        V1=true
        shift ;;
    -- ) shift; break ;;
    *)  echo "Unknown arguments"
        usage
        ;;
  esac
done


if [ -z ${cf_manifest_file} ]; then
  >&2 echo "ERROR: CF manifest file is missing"
  argument_error=true
else
  if [ ! -f "${cf_manifest_file}" ]; then
    >&2 echo "ERROR: CF manifest '${cf_manifest_file}' is not a regular file"
    argument_error=true
  fi
fi

if [ -z ${property_overrides} ]; then
  >&2 echo "ERROR: Property-overrides stub file is missing"
  argument_error=true

else
  if [ ! -f "${property_overrides}" ]; then
    >&2 echo "ERROR: Property-overrides stub '${property_overrides}' is not a regular file"
    argument_error=true
  fi
fi

if [[ ! -z "${db_settings}" && ! -f "${db_settings}" ]]; then
  >&2 echo "ERROR: Database Setting stub '${db_settings}' is not a regular file"
  argument_error=true
fi
if [[ $V1 == true ]]; then
   template_file="bosh-lite-manifest-template-v1.yml"
   echo "Generating BOSH V1 manifest using " ${template_file} "as manifest template"
else
   template_file="bosh-lite-manifest-template-v2.yml"
   echo "Generating BOSH V2 manifest using " ${template_file} "as manifest template"
fi

if [ ! -z $argument_error ]; then
  echo
  usage
fi


BOSH_STATUS=$(bosh status)
EXPECTED_DIRECTOR_NAME="Bosh Lite Director"

if [[ "$(echo "$BOSH_STATUS" | grep Name)" != *"$EXPECTED_DIRECTOR_NAME"* ]]; then
  echo "Can only target $EXPECTED_DIRECTOR_NAME. Please use 'bosh target' before running this script."
  exit 1
fi

tmpdir=$(mktemp -d /tmp/autoscaler-bosh-lite-manifest.XXXXX)
director_uuid_file=${tmpdir}/director.yml
printf "director_uuid: %s" $(bosh status --uuid) > ${director_uuid_file}

# Check for spiff installation
which spiff > /dev/null 2>&1 || {
  echo "Aborted. Please install spiff by following https://github.com/cloudfoundry-incubator/spiff#installation" 1>&2
  exit 1
}

spiff merge \
  ${templates_dir}/config-from-cf.yml \
  ${cf_manifest_file} \
  > ${tmpdir}/config-from-cf-merged.yml

mkdir -p ${root_dir}/bosh-lite/deployments

spiff merge \
${templates_dir}/${template_file} \
${director_uuid_file} \
${property_overrides} \
${db_settings} \
${tmpdir}/config-from-cf-merged.yml  \
> ${root_dir}/bosh-lite/deployments/autoscaler.yml

bosh deployment ${root_dir}/bosh-lite/deployments/autoscaler.yml

